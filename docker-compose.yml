services:
  frontend:
    container_name: ai-chatbot-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_BACKEND_API_URL=${NEXT_PUBLIC_BACKEND_API_URL}
        - NEXT_PUBLIC_API_PREFIX=${NEXT_PUBLIC_API_PREFIX}
        - NEXT_PUBLIC_DOMAIN_URL=${NEXT_PUBLIC_DOMAIN_URL}
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_DOMAIN_URL=http://localhost:3001
      - NODE_ENV=production
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./.env:/app/.env
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    container_name: ai-chatbot-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./.env:/app/.env
    depends_on:
      - minio
      - mongodb
      - qdrant
      - redis
    networks:
      - app-network

  mongodb:
    image: mongo:7
    container_name: ai-chatbot-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  mongo-express:
    image: mongo-express:latest
    container_name: ai-chatbot-mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
    depends_on:
      - mongodb
    networks:
      - app-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-chatbot-qdrant
    ports:
      - "6334:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: ai-chatbot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: ai-chatbot-minio
    ports:
      - "9000:9000"     # S3 API
      - "9001:9001"     # Web Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=ai-chatbot-files
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  mongo_data:
  qdrant_data:
  redis_data:
  minio_data:

networks:
  app-network:
    driver: bridge
